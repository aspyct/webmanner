#!/usr/bin/env ruby

# Usage example
# man 2 read | ./webmanner > read.2.html

# Copyright (c) 2012 Antoine d'Otreppe <a.dotreppe@aspyct.org>
# (short -> that's the MIT license)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

class ManPage
    attr_accessor :title

    def initialize
        @builder = ManHtmlBuilder.new
        @open_style = :none # :bold, :italic
        @open_block = :none # :title, :paragraph
        @buffer = ""
    end

    def html
        @builder.html
    end

    def parse_file open_file
        prevc = nil

        while c = open_file.getc
            nc = open_file.getc
            style = :none

            while nc == ?\b # Trying to boldify, underline et al
                # We're interested in the next char
                nc = open_file.getc

                if c == ?_
                    # Underline, swap with underlined char
                    c, nc = nc, c
                end

                case nc
                when c # That's bold !
                    self.open :title if prevc == ?\n # More, it's a title
                    style = :bold
                when ?_
                    style = :italic
                when ?o
                    # Bullet
                    c = ?-
                else
                    $stderr.puts "Unexpected char after \\b: #{nc}"
                end
                
                nc = open_file.getc
            end
            
            open_file.ungetc nc if nc != nil

            self.push_char c, style
            prevc = c
        end

        self.commit_buffer
    end

    def push_char char, style
        if char != ?\  and style != @open_style
            self.close @open_style
            self.open style unless style == :none
            @open_style = style
        end

        @buffer << char

        if char == ?\n
            self.close :title
        end
    end

    def open type
        self.commit_buffer
        @builder.open type
    end

    def close type
        if @builder.open? type
            self.commit_buffer
            @builder.close type
        end
    end

    def close_all *types
        for type in types
            self.close type
        end
    end

    def commit_buffer
        @builder << @buffer
        @buffer = ""
    end
end

class ManHtmlBuilder
    def initialize
        @builder = HtmlBuilder.new
    end
    
    def html
        @builder.html
    end
    
    def open? type
        @builder.open? type
    end
    
    def << text
        @builder << text
    end
    
    def open type
        if not (type == :bold and self.open? :title)
            @builder.open type
        end
    end
    
    def close type
        if not (type == :bold and self.open? :title)
            @builder.close type
        end
    end
end

class HtmlBuilder
    require 'set'

    def initialize
        @html = ""
        @open = Set.new
    end

    def html
        @html
    end

    def open? type
        return @open.include? type
    end

    def << text
        # Escape chars
        for c in text.chars
            case c
            when "<"
                c = "&lt;"
            when ">"
                c = "&gt;"
            when "&"
                c = "&amp;"
            end
            
            @html << c
        end
    end

    def open type
        if @open.add? type
            @html << "<#{@@tags[type]}>"
        else
            raise "Tag already open: #{type}"
        end
    end

    def close type
        if @open.delete? type
            @html << "</#{@@tags[type]}>"
        else
            raise "Tag was not open: #{type}"
        end
    end

    @@tags = {
        :title  => "h2",
        :bold   => "strong",
        :italic => "em"
    }
end

page = ManPage.new
page.parse_file $stdin
puts "<html>
    <head>
        <style>
            html {
                white-space: pre;
                font-family: monospace
            }
        </style>
    </head>
    <body>#{page.html}</body>
</html>"
