#!/usr/bin/env ruby

# Usage example
# man 2 read | ./webmanner > read.2.html

# Copyright (c) 2012 Antoine d'Otreppe <a.dotreppe@aspyct.org>
# (short -> that's the MIT license)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

module ManParserBase
    attr_accessor :title

    def initialize
        @builder = ManHtmlBuilder.new
        @open_style = :none # :bold, :italic
        @open_block = :none # :title, :paragraph
        @buffer = ""
    end

    def html
        @builder.html
    end

    def parse_file open_file
        raise "This method must be implemented in subclasses"
    end
    
    def exec section, title
        raise "This method must be implemented in subclasses"
    end
    
    def exec_and_parse command
        require 'open3'
        
        Open3.popen2 command do |stdin, stdout|
            parse_file stdout
        end
    end

    def push_char char, style
        if char != ?\  and style != @open_style
            self.close @open_style
            self.open style unless style == :none
            @open_style = style
        end

        @buffer << char

        if char == ?\n
            self.close :title
        end
    end

    def open type
        self.commit_buffer
        @builder.open type
    end

    def close type
        if @builder.open? type
            self.commit_buffer
            @builder.close type
        end
    end

    def close_all *types
        for type in types
            self.close type
        end
    end

    def commit_buffer
        @builder << @buffer
        @buffer = ""
    end
end

class OsxManPage
    include ManParserBase
    
    def parse_file open_file
        prevc = nil

        while c = open_file.getc
            nc = open_file.getc
            style = :none

            while nc == ?\b # Trying to boldify, underline et al
                # We're interested in the next char
                nc = open_file.getc

                if c == ?_
                    # Underline, swap with underlined char
                    c, nc = nc, c
                end

                case nc
                when c # That's bold !
                    self.open :title if prevc == ?\n # More, it's a title
                    style = :bold
                when ?_
                    style = :italic
                when ?o, ?-
                    # should be a bullet
                    c = ?-
                else
                    $stderr.puts "Unexpected char after #{c}\\b: #{nc}"
                end
                
                nc = open_file.getc
            end
            
            open_file.ungetc nc if nc != nil

            self.push_char c, style
            prevc = c
        end

        self.commit_buffer
    end
    
    def exec section, title
        exec_and_parse "man #{section} #{title}"
    end
end

class ManHtmlBuilder
    def initialize
        @builder = HtmlBuilder.new
    end
    
    def html
        @builder.html
    end
    
    def open? type
        @builder.open? type
    end
    
    def << text
        if self.open? :title
            text.strip!
        end
        
        @builder << text
    end
    
    def open type
        if not (type == :bold and self.open? :title)
            @builder.open type
        end
    end
    
    def close type
        if not (type == :bold and self.open? :title)
            @builder.close type
        end
    end
end

class HtmlBuilder
    require 'set'

    def initialize
        @html = ""
        @open = Set.new
    end

    def html
        @html
    end

    def open? type
        return @open.include? type
    end

    def << text
        # Escape chars
        for c in text.chars
            case c
            when "<"
                c = "&lt;"
            when ">"
                c = "&gt;"
            when "&"
                c = "&amp;"
            end
            
            @html << c
        end
    end

    def open type
        if @open.add? type
            @html << "<#{@@tags[type]}>"
        else
            raise "Tag already open: #{type}"
        end
    end

    def close type
        if @open.delete? type
            @html << "</#{@@tags[type]}>"
        else
            raise "Tag was not open: #{type}"
        end
    end

    @@tags = {
        :title  => "h2",
        :bold   => "strong",
        :italic => "em"
    }
end

class ManHtmlBodyWrapper
    attr_accessor :body, :default_style, :tab_spaces
    
    def initialize
        @title = "Man page"
        @indent = ""
        @css = []
        @js = []
        @output = nil
        @tab_spaces = 4
        @default_style = "html { white-space: pre; font-family: monospace; }"
    end
    
    def add_css path
        @css << path
    end
    
    def add_js path
        @js << path
    end
    
    def print_to output
        @output = output
        # Don't like this...
        puts "<!DOCTYPE html>"
        self.tag :html do
            self.tag :head do
                self.one_liner :title, @title
                self.one_liner :style, @default_style
                self.put_css_tags
                self.put_js_tags
            end
            self.one_liner :body, @body
        end
    end
    
    def tag tag, &block
        open_tag tag
        block.call
        close_tag tag
    end
    
    def open_tag tag
        puts "<#{tag}>"
        indent
    end
    
    def close_tag tag
        dedent
        puts "</#{tag}>"
    end
    
    def one_liner tag, contents
        puts "<#{tag}>#{contents}</#{tag}>"
    end
    
    def puts line
        @output.puts "#{@indent}#{line}"
    end
    
    def put_css_tags
        for stylesheet in @css
            puts "<link rel='stylesheet' href='#{stylesheet}'/>"
        end
    end
    
    def put_js_tags
        for javascript in @js
            puts "<script src='#{javascript}'></script>"
        end
    end
    
    def indent
        @indent << " " * @tab_spaces
    end
    
    def dedent
        @indent.slice!(0, @tab_spaces)
    end
end


# Start main
require 'optparse'

wrapper = ManHtmlBodyWrapper.new
force_linux = false

optparser = OptionParser.new do |opts|
    prog = File.basename $0
    opts.banner = "Usage: #{prog} [[<section>] <title>]"
    opts.summary_indent = "  "
    opts.summary_width = 20
    
    opts.on("-j", "--js PATH", "Add a <script> tag with given PATH as source") do |path|
        wrapper.add_js path
    end
    
    opts.on("-s", "--style PATH", "Add a <link rel='stylesheet'> tag with given PATH as href") do |path|
        wrapper.add_css path 
    end
    
    opts.on("-t", "--tab-width NUM", "Set the number of whitespaces for html indentation") do |num|
        wrapper.tab_spaces = num.to_i
    end
    
    opts.on("-l", "--linux", "Force webmanner to operate under linux") do
        force_linux = true
    end
end

optparser.parse!

# Because webmanner is not alright yet under linux...
if `uname`.chomp.downcase == "linux"
    $stderr.puts "I do not work properly yet under linux"
    if force_linux
        $stderr.puts "Forced by --linux flag"
    else
        $stderr.puts "Add --linux flag to force run"
        exit
    end
end

page = OsxManPage.new

if ARGV.count > 0 and ARGV.count <= 2
    # Arguments given, probably section and title
    title = ARGV.pop
    section = ARGV.pop
    page.exec section, title
    wrapper.body = page.html
    wrapper.print_to $stdout
else
    puts optparser.help
end

